<?php
// $Id$

/**
 * Returns the path to a "dried out version" of the given css file.
 *
 * @param $path
 *    Path to the css file to dry up.
 * @return
 *    new path to the dried out version of the provided css, or null if the source css file was not found.
 */
function cssdry_stylesheet($path) {
  require_once('cssdry.inc');

  if (file_exists($path)) {
    $dry_file = 'cssdry-'.md5(realpath($path)) . '.css';
    $dry_path = file_directory_path() . '/css/' . $dry_file;
    if (!file_exists($dry_path) || filemtime($dry_path) < filemtime($path)) {
      file_delete($dry_path);

      $contents = file_get_contents($path);

      $types['all'][$path] = true;

      $compressed_file = drupal_build_css_cache($types,  $dry_file);
      $compressed_content = file_get_contents($compressed_file);
      file_put_contents($dry_path, _cssdry($compressed_content, null));
    }

    return $dry_path;
  }
}


/**
 * Implements hook_init()
 */
function cssdry_init() {
  global $conf;

  // TODO: Figure out how to determine the current theme, not the default one.
  //       at this point however at this point the in request processing, the theme isn't known.
  $theme_default = $conf['theme_default'];

  // Grab all the cssdry stylesheets.
  $stylesheets = _cssdry_fetch_theme_stylesheets($theme_default);
  if (empty($stylesheets)) {
    return;
  }

  foreach ($stylesheets AS $media => $files) {
    foreach ($files AS $file => $path) {
      drupal_add_css(cssdry_stylesheet($path.'/'.$file, 'theme', $media));
    }
  }
}

/**
 * Returns an associative array from media type to an array of appropriate files.
 *
 * @param $name
 *    The name of the theme.
 * @return
 *    An associative array mapping media types to an array of appropriate css files.
 */
function _cssdry_fetch_theme_stylesheets($name) {
  $paths = _cssdry_paths_to_basetheme($name);

  $themes = list_themes();

  $stylesheets = array();

  // Start with the base theme and travel up the chain to the active theme.
  foreach ($paths AS $theme_name => $path) {
    // Look at the conditional-stylesheets defined in the theme's .info file.
    if (!empty($themes[$theme_name]->info['cssdry'])) {
      foreach ($themes[$theme_name]->info['cssdry'] AS $media => $files) {
        // Allow the theme to override its base themes' styles.
        foreach ($files AS $file) {
          $stylesheets[$media][$file] = $path;
        }
      }
    }
  }

  return $stylesheets;
}

/**
 * Return paths for the theme and its base themes.
 *
 * @param $theme
 *   The name of the theme.
 * @return
 *   An array of all the theme paths.
 */
function _cssdry_paths_to_basetheme($theme) {
  static $theme_paths;

  if (empty($theme_paths[$theme])) {
    $theme_paths[$theme] = array();
    $themes = list_themes();
    // Grab the paths from the base theme.
    if (!empty($themes[$theme]->base_theme)) {
      $theme_paths[$theme] = _cssdry_paths_to_basetheme($themes[$theme]->base_theme);
    }
    $theme_paths[$theme][$theme] = dirname($themes[$theme]->filename);
  }

  return $theme_paths[$theme];
}

/**
 * Implementation of hook_flush_caches().
 * Removing css dry file when clearing cache
 * to force creation of a new one.
 *
 * @return array
 *   An empty array to satisfy Drupal
 */
function cssdry_flush_caches() {
  if (!variable_get('cssdry_cache_clear_deletes_files', TRUE)) {
    return;
  }

  $dir = realpath(file_directory_path() . '/css');
  if ($dir) {
    $dh = new DirectoryIterator($dir);
    foreach ($dh as $file) {
      if (!$file->isDot()) {
        file_delete($file->getPathname());
      }
    }
  }

  // Drupal expects an array, so I guess we should do this
  return array();
}